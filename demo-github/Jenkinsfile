pipeline {

  /* -------- Agent Docker tout‑en‑un -------- */
  agent {
    docker {
      // image officielle Jenkins avec Maven + Docker CLI
      image 'olymahmudmugdho/maven-docker'

      // monte le socket Docker du host + cache Maven
      args  '-v /var/run/docker.sock:/var/run/docker.sock ' +
            '-v $HOME/.m2:/root/.m2'
    }
  }

  /* -------- Variables d’environnement -------- */
  environment {
    IMAGE_NAME           = 'demo-github-app'
    REGISTRY_CREDENTIALS = 'dockerhub-creds'

    // --- Sonar ---
    SONAR_HOST_URL       = 'http://192.168.136.143:9000'
    SONAR_TOKEN          = 'sqp_9e0f3e0d01fd721572a25292068f7964dad8a9f7'   // (test seulement)
    SONAR_PROJECT_KEY    = 'EvanBlaise'
    SONAR_PROJECT_NAME   = 'EvanBlaise'
    SONAR_SOURCES        = 'src/main/java'
    SONAR_JAVA_BINARIES  = 'target/classes'
  }

  stages {

    stage('Test') {
      steps {
        dir('demo-github') {
          sh 'mvn test'
        }
      }
    }

    stage('SonarQube') {
      steps {
        dir('demo-github') {
          withSonarQubeEnv('EvanBlaise') {
            sh """
              mvn sonar:sonar \
                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                -Dsonar.sources=${SONAR_SOURCES} \
                -Dsonar.java.binaries=${SONAR_JAVA_BINARIES} \
                -Dsonar.host.url=${SONAR_HOST_URL} \
                -Dsonar.login=${SONAR_TOKEN}
            """
          }
        }
      }
    }

    stage('Package') {
      steps {
        dir('demo-github') {
          sh 'mvn package -DskipTests'
        }
      }
    }

    stage('Check Docker') {
      steps {
        sh 'docker --version'
        sh 'docker info --format "{{.ServerVersion}}"'
      }
    }

    stage('Docker Build') {
      steps {
        dir('demo-github') {
          sh 'docker build -t $IMAGE_NAME .'
        }
      }
    }

    stage('Docker Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: REGISTRY_CREDENTIALS,
                                          usernameVariable: 'DOCKER_USER',
                                          passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker tag $IMAGE_NAME "$DOCKER_USER/$IMAGE_NAME:latest"
            docker push "$DOCKER_USER/$IMAGE_NAME:latest"
          '''
        }
      }
    }
  }
}
