pipeline {
  agent {
    docker {
      image 'maven:3.9.7-eclipse-temurin-17'
      args  '-v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.m2:/root/.m2'
    }
  }

  environment {
    REGISTRY_CREDENTIALS = 'dockerhub-creds'   // id Jenkins credentials
    IMAGE_NAME = "demo-github-app"
    SONAR_HOST_URL = 'http://192.168.136.143:9000/'
    SONAR_TOKEN = 'sqp_9e0f3e0d01fd721572a25292068f7964dad8a9f7' // token en clair pour test
    SONAR_PROJECT_KEY = 'EvanBlaise'
    SONAR_PROJECT_NAME = 'EvanBlaise'
    SONAR_SOURCES = 'src/main/java'
    SONAR_JAVA_BINARIES = 'target/classes'
  }

  stages {
    stage('Checkout') {
      steps {
        echo 'Code déjà récupéré.'
      }
    }

stage('Test') {
  steps {
    dir('demo-github') {
      sh 'mvn test'
    }
  }
}

stage('Analyse SonarQube') {
  steps {
    dir('demo-github') {
      withSonarQubeEnv('EvanBlaise') {
        sh """
          mvn sonar:sonar \
            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
            -Dsonar.projectName=${SONAR_PROJECT_NAME} \
            -Dsonar.sources=${SONAR_SOURCES} \
            -Dsonar.java.binaries=${SONAR_JAVA_BINARIES} \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN}
        """
      }
    }
  }
}

stage('Package') {
  steps {
    dir('demo-github') {
      sh 'mvn package -DskipTests'
    }
  }
}

    stage('Docker Build') {
      steps {
        sh 'docker build -t $IMAGE_NAME .'
      }
    }

    stage('Docker Scan (optionnel)') {
      steps {
        sh 'docker scan $IMAGE_NAME || echo "Scan non bloquant"'
      }
    }

    stage('Docker Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: REGISTRY_CREDENTIALS, usernameVariable: 'USER', passwordVariable: 'PASS')]) {
          sh 'echo $PASS | docker login -u $USER --password-stdin'
          sh 'docker tag $IMAGE_NAME $USER/$IMAGE_NAME:latest'
          sh 'docker push $USER/$IMAGE_NAME:latest'
        }
      }
    }
  }
}
