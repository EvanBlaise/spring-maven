pipeline {
  /*
   * Utilise l'image Maven officielle pour disposer de Maven + JDK 17
   * Monte le socket Docker de l'hôte pour pouvoir builder/pusher des images
   */
  agent {
    docker {
      image 'maven:3.9.7-eclipse-temurin-17'
      args  '-v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.m2:/root/.m2'
    }
  }

  environment {
    REGISTRY_CREDENTIALS = 'dockerhub-creds'   // id Jenkins credentials
    IMAGE_NAME = "demo-github-app"
    SONAR_TOKEN   = credentials('sonar-token') // id Jenkins credentials (si repo privé Sonar)
  }

  stages {
    stage('Checkout') {
      steps {
        // Le code est déjà check‑out par Jenkins grâce au SCM
        echo 'Code déjà récupéré.'
      }
    }

    stage('Test') {
      steps {
        sh 'mvn test'
      }
    }

    stage('Analyse SonarQube') {
      steps {
        withSonarQubeEnv('sonar') {
          sh 'mvn sonar:sonar -Dsonar.projectKey=EvanBlaise -Dsonar.login=$SONAR_TOKEN'
        }
      }
    }

    stage('Package') {
      steps {
        sh 'mvn package -DskipTests'
      }
    }

    stage('Docker Build') {
      steps {
        sh 'docker build -t $IMAGE_NAME .'
      }
    }

    stage('Docker Scan (optionnel)') {
      steps {
        sh 'docker scan $IMAGE_NAME || echo "Scan non bloquant"'
      }
    }

    stage('Docker Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: REGISTRY_CREDENTIALS, usernameVariable: 'USER', passwordVariable: 'PASS')]) {
          sh 'echo $PASS | docker login -u $USER --password-stdin'
          sh 'docker tag $IMAGE_NAME $USER/$IMAGE_NAME:latest'
          sh 'docker push $USER/$IMAGE_NAME:latest'
        }
      }
    }
  }
}
