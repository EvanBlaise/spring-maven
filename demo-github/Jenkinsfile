pipeline {
    agent any

    environment {
        IMAGE_NAME           = 'demo-github-app'
        REGISTRY_CREDENTIALS = 'dockerhub-creds'

        SONAR_HOST_URL       = 'http://192.168.136.143:9000'
        SONAR_TOKEN          = 'sqp_9e0f3e0d01fd721572a25292068f7964dad8a9f7'
        SONAR_PROJECT_KEY    = 'EvanBlaise'
        SONAR_PROJECT_NAME   = 'EvanBlaise'
        SONAR_SOURCES        = 'src/main/java'
        SONAR_JAVA_BINARIES  = 'target/classes'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Maven Build & Test') {
            agent {
                docker { image 'maven:3.9.10-sapmachine-17' }
            }
            steps {
                dir('demo-github') {
                    sh 'mvn clean package'
                     sh 'ls -l target'
                }
            }
        }

        stage('SonarQube Analysis') {
            agent {
                docker { image 'maven:3.9.10-sapmachine-17' }
            }
            steps {
                dir('demo-github') {
                    sh """
                        mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh 'ls -l demo-github/target'
                    docker.build("${IMAGE_NAME}:latest", "-f demo-github/Dockerfile demo-github")
                                sh 'ls -l demo-github/target'
            sh 'ls -l demo-github'
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', REGISTRY_CREDENTIALS) {
                        docker.image("${IMAGE_NAME}:latest").push()
                    }
                }
            }
        }
    }
}
